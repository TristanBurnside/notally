/*** Generated by streamline 0.10.15 (callbacks) - DO NOT EDIT ***/ var __rt=require('streamline/lib/callbacks/runtime').runtime(__filename, false),__func=__rt.__func,__cb=__rt.__cb; var neo4j = require("neo4j");
var underscore = require("underscore");
var db = new neo4j.GraphDatabase("http://localhost:7474");
var sl = require("streamline");

var createNoteQuery = ["CREATE (n:Note {note:{noteToCreate}})","RETURN  n",].join("\n");

var getNoteQuery = ["MATCH (n:Note)-->(k:Keyword)","WHERE id(n) = {noteID}","RETURN n,collect(k)",].join("\n");


var getAllNotesQuery = ["MATCH (n:Note)","RETURN n",].join("\n");

var getNotesForKeywordQuery = ["MATCH (n:Note)-->(k:Keyword)","WHERE k.keyword = {keyword}","RETURN n",].join("\n");


var findKeywordQuery = ["MATCH (n:Keyword{keyword:{keywordToRetrieve}})","RETURN n",].join("\n");

var createKeywordQuery = ["CREATE (k:Keyword {keyword:{keywordToCreate}})","RETURN  k",].join("\n");

var linkKeywordQuery = ["MATCH (note), (keyword)","WHERE id(note) = {noteID} AND id(keyword) = {keywordID}","CREATE (note)-[:HAS_KEYWORD]->(keyword)",].join("\n");



function add(text, _) { var params, results, note, textWords, words, keywords, nodes, i, keywordNodes, keywordNode; var __frame = { name: "add", line: 24 }; return __func(_, this, arguments, add, 1, __frame, function __$add() {


    params = { noteToCreate: text };
    return db.query(createNoteQuery, params, __cb(_, __frame, 4, 18, function ___(__0, __1) { results = __1;


      note = results.map(function(result) { return result.n; }).pop();
      return note.save(__cb(_, __frame, 8, 13, function ___(__0, __2) { note = __2;



        textWords = text.replace(/['!"#$%&\\'()\*+,\-\.\/:;<=>?@\[\\\]\^_`{|}~']/g, "");

        words = textWords.split(" ");


        keywords = underscore.filter(words, function(word) {
          return !underscore.contains(excludedWords, word.toUpperCase()); });




        nodes = [];


        i = 0; var __8 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$add() { __more = false; if (__8) { i++; } else { __8 = true; } ; var __7 = (i < keywords.length); if (__7) {
              params = { keywordToRetrieve: keywords[i] };
              return db.query(findKeywordQuery, params, __cb(_, __frame, 28, 19, function ___(__0, __3) { results = __3;

                keywordNodes = results.map(function(result) {
                  return result.n; });


                keywordNode = keywordNodes.pop(); return (function __$add(__then) {
                  if (!keywordNode) {
                    params = { keywordToCreate: keywords[i] };
                    return db.query(createKeywordQuery, params, __cb(_, __frame, 37, 16, function ___(__0, __4) { results = __4;

                      keywordNode = results.map(function(result) {
                        return result.k;
                      }).pop(); __then(); }, true)); } else { __then(); } ; })(function __$add() {




                  nodes.push(keywordNode); while (__more) { __loop(); }; __more = true; }); }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$add() {



          i = 0; var __12 = false; return (function ___(__break) { var __more; var __loop = __cb(_, __frame, 0, 0, function __$add() { __more = false; if (__12) { i++; } else { __12 = true; } ; var __11 = (i < nodes.length); if (__11) {
                params = {
                  noteID: note.id,
                  keywordID: nodes[i].id };

                return db.query(linkKeywordQuery, params, __cb(_, __frame, 55, 5, function __$add() { while (__more) { __loop(); }; __more = true; }, true)); } else { __break(); } ; }); do { __loop(); } while (__more); __more = true; })(function __$add() {



            return _(null, note.id); }); }); }, true)); }, true)); });};


function get(noteID, _) { var params, results, note, keywords; var __frame = { name: "get", line: 86 }; return __func(_, this, arguments, get, 1, __frame, function __$get() {
    params = { noteID: Number(noteID) };
    return db.query(getNoteQuery, params, __cb(_, __frame, 2, 18, function ___(__0, __1) { results = __1.pop();

      note = results.n;
      keywords = results["collect(k)"];

      return _(null, {
        note: note,
        keywords: keywords }); }, true)); });};



function getRandom(_) { var params, results, result, noteID; var __frame = { name: "getRandom", line: 99 }; return __func(_, this, arguments, getRandom, 0, __frame, function __$getRandom() {
    params = { };
    return db.query(getAllNotesQuery, params, __cb(_, __frame, 2, 18, function ___(__0, __1) { results = __1;
      result = underscore.sample(results);
      noteID = result.n.id;

      return _(null, noteID); }, true)); });};


function getForKeyword(keyword, _) { var params, results, result, noteID; var __frame = { name: "getForKeyword", line: 108 }; return __func(_, this, arguments, getForKeyword, 1, __frame, function __$getForKeyword() {
    params = { keyword: keyword };
    return db.query(getNotesForKeywordQuery, params, __cb(_, __frame, 2, 18, function ___(__0, __1) { results = __1;
      result = underscore.sample(results);
      noteID = result.n.id;

      return _(null, noteID); }, true)); });};


exports.add = add;
exports.get = get;
exports.getRandom = getRandom;
exports.getForKeyword = getForKeyword;
var excludedWords = ["A","ABLE","ABLY","AD","ADD","ADDS","ADO","ADOS","ADS","AE","AGO","AH","AHA","ALL","ALLS","AM","AN","AND","ANDS","ANY","ARE","AS","AT","AY","B","BE","BY","BYE","BYES","C","CAME","CAN","CH","CIAO","D","DA","DAS","DE","DI","DID","DO","DONE","DOWN","E","EACH","EE","EF","EH","EL","EN","ER","EVER","F","FA","FAR","FEW","FIND","FINE","FOR","FULL","FY","G","GAVE","GIVE","GO","GOOD","H","HA","HAD","HAH","HAHA","HARD","HAVE","HE","HEH","HEHS","HER","HERS","HES","HEY","HI","HIGH","HIM","HIS","HM","HMM","HO","HOPE","HOS","HUH","I","IF","IFFY","IN","IS","IT","ITS","J","JUST","K","L","LA","LESS","LET","LETS","LO","LOTS","M","MAKE","MANY","ME","MINE","MUCH","N","NA","NAH","NO","NONE","NOO","NOR","NOT","NOW","O","OF","OFF","OFFS","OFT","OH","OKAY","ON","ONLY","OOH","OOHS","OR","OUR","OURS","OUT","P","PER","PLUS","PUT","PUTS","Q","R","RAN","RE","S","SAID","SAY","SAYS","SEE","SEEM","SEEN","SHE","SO","SOME","SOON","SUCH","T","TA","TE","TELL","THAN","THAT","THE","THEE","THEM","THEN","THEY","TIS","TO","TOO","TWAS","U","UH","UN","UP","UR","US","USE","USES","UT","V","VERY","W","WAS","WE","WHAT","WHEN","WITH","WO","WOW","WOWS","X","XI","XU","Y","YA","YAH","YAHS","YAY","YAYS","YE","YEH","YEP","YES","YET","YO","YOU","YU","Z","ZO",];
